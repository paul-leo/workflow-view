name: Deploy Next.js App

on:
  push:
    branches: ['main']
    paths:
      - 'nextjs-app/**'
  workflow_dispatch:

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: focusbe/nextjs-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./nextjs-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: nextjs-app/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint & Build
        run: |
          npm run lint
          npm run build
        
      - name: Get version from package.json
        id: package-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ env.REGISTRY }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./nextjs-app
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64
          
      - name: Trigger deployment webhook
        env:
          VERSION: ${{ env.VERSION }}
          WEBHOOK_SECRET: ${{ secrets.DEPLOY_WEBHOOK_SECRET }}
          DEPLOY_URL: ${{ secrets.DEPLOY_URL || 'https://deploy.dev.baibian.app/deploy' }}
        run: |
          curl --fail --show-error -X POST ${{ env.DEPLOY_URL }} \
            -H "Content-Type: application/json" \
            -d "{\"name\":\"nextjs-app\",\"repo\":\"${{ env.IMAGE_NAME }}\",\"version\":\"${{ env.VERSION }}\",\"port\":8813,\"containerPort\":3000,\"secret\":\"${{ env.WEBHOOK_SECRET }}\"}"
            
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
